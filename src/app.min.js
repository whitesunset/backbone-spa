window.App = {
  Collections: {},
  Models: {},
  Views: {
    User: {}
  },
  collections: {},
  models: {},
  views: {
    user: {}
  },
  templates: {
    user: {}
  },
  init: function() {
    App.models.app = new App.Models.App();
    App.collections.users = new App.Collections.Users();
    new App.Router();
    Backbone.history.start();
    return $.material.init();
  }
};

$(function() {
  return App.init();
});

App.Router = Backbone.Router.extend({
  routes: {
    '': 'index',
    '#': 'index',
    'user/:id': 'user',
    '*notFound': 'notFound'
  },
  initialize: function() {
    return App.views.root = new App.Views.Root;
  },
  user: function(id) {
    App.views.root.render();
    App.models.app.set('page.title', 'Edit User');
    return App.views.user.edit = new App.Views.User.Edit(+id);
  },
  index: function() {
    App.views.root.render();
    App.models.app.set('page.title', '');
    return App.views.user.list = new App.Views.User.List();
  },
  notFound: function() {
    return App.views.root.render404();
  }
});

$.fn.switchState = function(text, className, delay) {
  var btn, oldText;
  btn = this;
  if (delay == null) {
    delay = 2000;
  }
  oldText = btn.html();
  btn.html(text).addClass(className);
  return setTimeout(function() {
    return btn.html(oldText).removeClass(className);
  }, delay);
};

App.Models.App = Backbone.DeepModel.extend({
  defaults: {
    page: {
      title: ''
    }
  }
});

App.Models.User = Backbone.DeepModel.extend({
  urlRoot: 'http://jsonplaceholder.typicode.com/users/'
});

App.Collections.Users = Backbone.PageableCollection.extend({
  url: 'http://jsonplaceholder.typicode.com/users/',
  model: App.Models.User,
  mode: 'client',
  state: {
    pageSize: 5,
    sortKey: "id",
    order: 0
  }
});

App.templates.root = _.template('<nav class="navbar navbar-inverse navbar-fixed-top"><div class="container"><div class="navbar-header"> <a href="#" class="navbar-brand"> Dashboard</a><span class="navbar-brand page-title" id="page_title"></span></div></div></nav><div class="container"> <div id="content" class="main anim-loading anim-active"></div></div><footer> <div class="container"> <p>2016 &copy; Company, Inc.</p> </div> </footer>');

App.templates.user.edit = _.template('<form class="panel panel-default"> <div class="panel-body"> <form class="form-horizontal"> <fieldset> <div class="row"> <div class="col-sm-8"> <legend> <%= name.split(" ")[0] %> "<%= username %>" <%= name.split(" ")[1] %> </legend> </div> <div class="col-sm-4 text-right"> <button type="submit" class="btn btn-primary">Submit</button> </div> </div> <div class="form-group clearfix"> <label for="email" class="col-sm-2 control-label">Email</label> <div class="col-sm-10"> <input type="email" class="form-control" name="email" id="email" value="<%= email %>" placeholder="Email"> </div> </div> <div class="form-group clearfix"> <label for="website" class="col-sm-2 control-label">Website</label> <div class="col-sm-10"> <input type="url" class="form-control" name="website" id="website" value="http://<%= website %>" placeholder="Website"> </div> </div> <div class="form-group clearfix"> <label for="phone" class="col-sm-2 control-label">Phone</label> <div class="col-sm-10"> <span><%= phone %></span> </div> </div> <div class="form-group clearfix"> <label for="address" class="col-sm-2 control-label">Address</label> <div class="col-sm-10"> <div id="address"></div> </div> </div> <div class="form-group"> <div class="col-md-10 col-md-offset-2"> </div> </div> </fieldset> </form> </div> </div>');

App.templates.user.address = _.template('<div class="address"> <div><%= street %> str.</div> <div><%= suite %></div> <div><%= city %>, <%= zipcode %></div> <div class="iframe-container anim-loading anim-active"> <iframe width="600" height="450" frameborder="0" style="border:0" src="https://www.google.com/maps/embed/v1/place?q=<%= geo.lat %>,<%= geo.lng %>&key=AIzaSyCbhZbGfsiYQheGX3Zq969LH54uv7ymjIw" allowfullscreen> </iframe> </div> </div>');

App.Views.Root = Backbone.View.extend({
  el: '#root',
  initialize: function() {
    this.template = App.templates.root;
    this.model = App.models.app;
    return this.listenTo(this.model, 'change', this.renderHeader);
  },
  render: function() {
    this.$el.html(this.template(this.model.toJSON()));
    this.$el.find('#content').removeClass('error404');
    return this;
  },
  renderHeader: function() {
    var $el, title;
    title = this.model.toJSON().page.title;
    $el = this.$el.find('#page_title');
    $el.html('');
    if (title.length > 0) {
      return $el.html('<i>/</i>' + title);
    }
  },
  render404: function() {
    return this.$el.find('#content').html('').removeClass('anim-active').addClass('error404');
  }
});

App.Views.User.List = function() {
  var grid, paginator;
  grid = new Backgrid.Grid({
    className: 'table table-striped table-hover',
    columns: [
      {
        name: 'id',
        label: 'ID',
        cell: Backgrid.IntegerCell.extend({
          orderSeparator: ''
        })
      }, {
        name: 'name',
        label: 'Name',
        cell: Backgrid.Cell.extend({
          render: function() {
            var $el, columnName, model;
            $el = this.$el;
            $el.empty();
            model = this.model;
            columnName = this.column.get("name");
            $el.append('<a href="#user/' + model.get('id') + '">' + this.formatter.fromRaw(model.get(columnName), model) + '</a>');
            $el.addClass(columnName);
            this.updateStateClassesMaybe();
            this.delegateEvents();
            return this;
          }
        }),
        sortable: true,
        editable: false
      }, {
        name: 'email',
        label: 'Email',
        cell: "email",
        sortable: true,
        editable: false
      }, {
        name: 'address.city',
        label: 'City',
        cell: "string",
        sortable: true,
        editable: false
      }
    ],
    collection: App.collections.users
  });
  paginator = new Backgrid.Extension.Paginator({
    collection: App.collections.users
  });
  return App.collections.users.fetch({
    reset: true
  }).done(function() {
    $('#content').html(grid.render().$el);
    $('#content').append(paginator.render().$el);
    return $('#content').removeClass('anim-active');
  }).fail(function() {
    return App.views.root.render404();
  });
};

App.Views.User.Address = Backbone.View.extend({
  initialize: function() {
    return this.template = App.templates.user.address;
  },
  render: function() {
    var t;
    t = this;
    this.$el.html(this.template(this.model.toJSON()));
    this.$el.find('iframe').on('load', function() {
      return t.$el.find('.iframe-container').removeClass('anim-active');
    });
    return this;
  }
});

App.Views.User.Edit = Backbone.View.extend({
  el: '#content',
  model: App.models.user,
  initialize: function(id) {
    var t;
    t = this;
    this.template = App.templates.user.edit;
    this.model = new App.Models.User({
      id: id
    });
    this.$el.addClass('anim-active');
    return this.model.fetch().done(function() {
      return t.render();
    }).fail(function() {
      return App.views.root.render404();
    });
  },
  events: {
    'submit form': 'handleSubmit',
    'input [type!="submit"]': 'handleInput'
  },
  handleInput: function(e) {
    var field, value;
    field = e.target.name;
    value = _.escape(e.target.value);
    return this.model.set(field, value);
  },
  handleSubmit: function(e) {
    var btn;
    e.preventDefault();
    btn = $(e.target).find('[type="submit"]');
    return this.model.save().done(function() {
      return btn.switchState('Success', 'btn-success btn-raised');
    }).fail(function() {
      return btn.switchState('Fail', 'btn-danger btn-raised');
    });
  },
  render: function() {
    var address_model, address_view, data;
    this.$el.removeClass('anim-active');
    data = this.model.toJSON();
    this.$el.html(this.template(data));
    address_model = new Backbone.DeepModel(data.address);
    address_view = new App.Views.User.Address({
      model: address_model,
      el: '#address'
    });
    address_view.render();
    return this;
  }
});
